<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2016 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>

var %%NameSpace%%Header = {
	%%Customization%%
};

var %%GridId%%Utility = {
    setGridData: function (successData) {
    },
    setLineEditable: function (e){
    },
    columns:[%%Columns%%],
    schema: {
        model: {
            fields: {
                Delete: { editable: false }
            }
        }
    },
    dataChange: function (changedData){
    },
};

var %%NameSpace%% = {

%%GridId%%Config: {
    pageSize: sg.utls.gridPageSize,
    pageable: {
        input: true,
        numeric: false
    },
    scrollable: true,
    navigatable: true, //enable grid cell tabbing
    resizable: true,
    selectable: true,
    reorderable: sg.utls.reorderable,
    //Turns server side paging on
    isServerPaging: true,
    //Param will be null during Get and will contain the data that needs to be passed to the server on create
    param: null,
    getParam: function () {
        var grid = $('#%%GridId%%').data("kendoGrid");
         
        var pageNumber = grid.dataSource.page();
        var pageSize = grid.dataSource.pageSize();
        var parameters = {
            pageNumber: pageNumber - 1,
            pageSize: pageSize,
            model: ko.mapping.toJS(%%JSViewModel%%)
        }
        return parameters;
    },
    //URL to get the data from the server. 
    pageUrl: sg.utls.url.buildUrl('%%Module%%', '%%Controller%%', '%%Action%%'),
    //Call back function when Get is successfull. In this, the data for the grid and the total results count are to be set along with updating knockout
    buildGridData: %%GridId%%Utility.setGridData,
    //Call back function after data is bound to the grid. Is used to set the added line as editable
    afterDataBind: %%GridId%%Utility.setLineEditable,
    columns: %%GridId%%Utility.columns,
    editable: {
        mode: "incell",
        confirmation: false,
        createAt: "bottom"
    },
	%%SetUserPreference%%
    schema: %%GridId%%Utility.schema,
    // Called when the data changes in a cell. 
    dataChange: %%GridId%%Utility.dataChange,
    edit: function (e) {
        $('#%%GridId%%').data("kendoGrid").select(e.container.closest("tr"));


    },
    change: %%GridId%%Utility.insertLine
}
};

var %%GridId%%Utility = {
    setGridData: function (successData) {
    },
    setLineEditable: function (e){
    },
    columns:[%%Columns%%],
    schema: {
        model: {
            fields: {
                Delete: { editable: false }
            }
        }
    },
    dataChange: function (changedData){
    },
};